For first 14 questions use univ-ddl.sql as the schema and univ-data.sql as the database which are provided in the link.

Database 1 :- 

1) Display names of all persons in university - whether student or instructor, without any duplicates

2) Display course_id, course title and instructor ID of all courses in university.  Remove duplicates

3) List ID, name and salary of all instructors with salary less than 75000

4) List count of instructor in each department.  Departments with no instructors can be omitted.
If you include them also that is fine.

5) Find title, course_id of all courses that have a prereq, along with the course ID
of the prereq, in that order.  If a course has multiple prereqs they will be displayed as separate records in the result.

6) Find names of instructors with salary more than 10% of department budget.  If there are duplicates, let them be present in the output.

7) Find the names of all departments that co-exist with at least one other department in a building.
Ensure there are no duplicates in the result.

8) Assuming each student pays fees of 5000, find the total income of each department.
You can assume every department has at least 1 student.

9) Find ID of all instructors who are not teaching any course nor advising any student.
Hint: use either EXCEPT clause or NOT IN subqueries

10) Find IDs and names of all students who have taken a course in the 'Comp. Sci.' department as well as a course in the 'Biology' department  (not necessarily in the same semester), using intersect operation

11) Write a query to fetch name and id of all students who have credits greater than 30. 

12) Find the ID, name, dept_name and department building of every instructor

13) Find the total number of distinct students who have taken each course_id

14) Find IDs of students who have taken both CS-101 and CS-190

15) write a query to find out the number of students who have taken atleast one course 
taught by the professor with ID = '22222'


Database 2 :- 

For next 6 questions use movielens-schema.sql as the database schema and movielens-data.sql for the database these two files are provided in the link

1) Find (distinct) titles of all movies in the "Drama" genre with a maximum rating greater than or equal to the maximum rating of all "Quentin Tarantino" movies.  

Use the tag field to find Quentin Tarantino movies by looking for tags containing the string Quentin Tarantino (make sure to ignore case using ilike or the upper() function of PostgreSQL. 
Note also that genres is a string of genres separated by |, e.g. 'Comedy|Drama', and here too you should ignore case.  These instructions apply to all questions.)

2) Find the userids of all the users who have given ratings to all of the movies having genre Comedy and movieid <= 3.  You can assume that a user gives at most one rating for any movie.

3) For each rating level, count the number of users who have given that
    rating to the movie 'City Hall (1996)'.   Ensure the count is 0 if no one gave that rating.

    Assume that the possible ratings are from 0 to 5 in steps of 0.5, which can be 
    generated by using:   
           generate_series(0.0, 5.0, 0.5) as ratings_master(rating)
    in a from clause.  The set-valued function generate_series is postgresql specific and may not work in other databases, but can be implemented using recursive queries which will be covered later.

4) The genre field of movies is a string value field with multiple values.  Convert it to a normalized value.  Your output schema should be    
    movieid, title, genre
Replacing genres by genre, and given a tuple like (id1, 'foo', 'Comedy|Drama'), the output would have two tuples
   (id1, 'foo', 'Comedy')
   (id1, 'foo', 'Drama')

by using a combination of the functions string_to_array(string, delimiter) and  unnest(array) which returns a set of value from the array.  The result of unnest is a relation which you should use in the from clause e.g. FROM r, unnest(..) as s(a)  

5) Use the previous query in a WITH clause to get the normalized version of movies.  Using that, count the total number of distinct movie from each genre. 

6) Find id and title of all movies with genre Children that have average ratings greater than average ratings of movies with genre Comedy.  For the latter take average directly, instead of first finding average per movie and then taking that average.



